# Generated by Django 4.0.4 on 2022-05-28 23:10

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('cID', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cName', models.CharField(max_length=50, unique=True)),
                ('cImage', models.ImageField(default='', upload_to='smile/images/categoryImages')),
            ],
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('order_id', models.AutoField(primary_key=True, serialize=False)),
                ('items_json', models.CharField(max_length=5000)),
                ('name', models.CharField(max_length=90)),
                ('email', models.CharField(max_length=111)),
                ('address', models.CharField(max_length=111)),
                ('city', models.CharField(max_length=111)),
                ('state', models.CharField(max_length=111)),
                ('zip_code', models.CharField(max_length=111)),
                ('phone', models.CharField(default='', max_length=111)),
                ('OrderDetails', models.CharField(default='', max_length=5000)),
            ],
        ),
        migrations.CreateModel(
            name='PricingRule',
            fields=[
                ('prID', models.AutoField(primary_key=True, serialize=False)),
                ('prPricingRuleName', models.CharField(default='', max_length=300, unique=True)),
                ('pIncreaseFix', models.IntegerField()),
                ('pIncreasebyPercentage', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Smile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smileReason', models.CharField(max_length=200)),
                ('smile_Aprroval', models.BooleanField(default=False)),
                ('smileUserName', models.CharField(default='', max_length=100)),
                ('smileImage', models.ImageField(default='', upload_to='smile/images')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('Id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pName', models.CharField(max_length=250, unique=True)),
                ('pDescription', models.CharField(default='', max_length=250)),
                ('pImage', models.ImageField(default='', upload_to='smile/images/productImages')),
                ('pPrice', models.IntegerField(default=0)),
                ('pSalePrice', models.CharField(default='', max_length=250)),
                ('pQTY', models.IntegerField(default=0)),
                ('pCategories', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='smile.category')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('prID', models.AutoField(primary_key=True, serialize=False)),
                ('prPricingRuleName', models.CharField(max_length=3020)),
                ('prPrcingtwo', models.CharField(default='', max_length=300)),
                ('pricing3', models.CharField(default='', max_length=300)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
